import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";

const dummyJobs = [
  { id: 1, title: "Plumbing Fix", provider: "Unassigned", status: "Pending", rating: 4.5, completed: 25, earnings: 500 },  // Update with actual job data from the db API fetching
  { id: 2, title: "House Cleaning", provider: "Jane Smith", status: "Completed", rating: 5.0, completed: 10, earnings: 300 },
];

const JobManagement = () => {
  const [selectedJob, setSelectedJob] = useState(null);
  const [assignedProvider, setAssignedProvider] = useState("");
  const [message, setMessage] = useState("");
  const [freelancers, setFreelancers] = useState([]);

  useEffect(() => {
    // Fetch freelancers from the backend
    const fetchFreelancers = async () => {
      try {
        const response = await fetch("/api/freelancers"); // Update with actual API endpoint
        const data = await response.json();
        setFreelancers(data);
      } catch (error) {
        console.error("Error fetching freelancers:", error);
      }
    };
    fetchFreelancers();
  }, []);

  const handleAssign = () => {
    setMessage(`Assigned ${assignedProvider} to ${selectedJob.title}`);
    setSelectedJob(null);
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-semibold mb-4">Job Management</h2>
      {message && <div className="mb-4 p-2 bg-gray-200 rounded">{message}</div>}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {dummyJobs.map((job) => (
          <Card key={job.id} className="cursor-pointer" onClick={() => setSelectedJob(job)}>
            <CardHeader>
              <CardTitle>{job.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <p><strong>Provider:</strong> {job.provider}</p>
              <p><strong>Status:</strong> {job.status}</p>
              <p><strong>Rating:</strong> {job.rating} ⭐</p>
              <p><strong>Completed Jobs:</strong> {job.completed}</p>
              <p><strong>Earnings:</strong> ${job.earnings}</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {selectedJob && (
        <Dialog open={!!selectedJob} onOpenChange={() => setSelectedJob(null)}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>{selectedJob.title}</DialogTitle>
            </DialogHeader>
            <div>
              <p><strong>Provider:</strong> {selectedJob.provider}</p>
              <p><strong>Rating:</strong> {selectedJob.rating} ⭐</p>
              <p><strong>Completed Jobs:</strong> {selectedJob.completed}</p>
              <p><strong>Earnings:</strong> ${selectedJob.earnings}</p>
              {selectedJob.status === "Pending" && (
                <div className="mt-4">
                  <Select onValueChange={setAssignedProvider}>
                    <SelectTrigger>
                      <SelectValue placeholder="Assign Provider" />
                    </SelectTrigger>
                    <SelectContent>
                      {freelancers.map((freelancer) => (
                        <SelectItem key={freelancer.id} value={freelancer.name}>{freelancer.name}</SelectItem> // Update with actual freelancer datacfrom the db
                      ))}
                    </SelectContent>
                  </Select>
                  <DialogFooter>
                    <Button onClick={handleAssign} className="bg-gray-500">Assign Provider</Button>
                  </DialogFooter>
                </div>
              )}
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
};

export default JobManagement;
